# @package _global_

## Example training experiment with the training using SID

defaults:
  - override /trainer: ddp
  - override /data_loading: third_party/amazon_p5_sem_ids_train
  - override /logger: wandb
  - override /model: hf_transformer_semantic_id
  - override /eval: sid_retrieval
  - override /loss: cross_entropy_loss
  - override /callbacks: default
  - _self_

exp_id: "amazon-p5-test"
tags: ["clark-amazon-p5-test"]
seed: 42
paths:
  data_dir: ./data/amazon_no_cap/beauty

data_loading:
  train_dataloader_config:
    dataloader:
      batch_size_per_device: 2048
      dataset_config:
        semantic_id_map:
          sequence_data:
            _target_: torch.load
            _args_:
              - _target_: src.utils.file_utils.open_local_or_remote
                file_path: ./data/amazon/beauty/sids/flan-t5-xxl_rkmeans_3_256_seed42.pt
                mode: rb # R for read B for binary

  val_dataloader_config:
    dataloader:
      batch_size_per_device: 2048
  test_dataloader_config:
    dataloader:
      batch_size_per_device: 2048

model:
  # below are hyper-parameters recommended by TIGER
  huggingface_model:
    config:
      vocab_size: 256
      d_model: 128
      num_heads: 6
      d_ff: 1024
      d_kv: 64
      num_layers: 4
  feature_to_model_input_map:
    sequence_data: input_ids
    user_id: user_id
  decoder:
    config:
      num_layers: 4
  num_hierarchies: 4
  num_user_bins: 2000
  mlp_layers: 2 # bloating the MLP layers to 2 to match the number of parameters reported in TIGER


trainer:
  max_steps: !!int 320000
  # mixed precision for extra speed-up
  precision: 32-true
  log_every_n_steps: 100
  # perform a validation loop every N training epochs
  val_check_interval: 1600
  num_sanity_val_steps: 0
  min_epochs: 0 # setting this to 0 to unblock early stopping,
  # as we are using unbounded datasets.
  accumulate_grad_batches: 2

logger:
  wandb:
    project: "amazonp5_sid"

optim:
  optimizer:
    lr: !!float 1e-3
    weight_decay: !!float 1e-4

  scheduler: null

callbacks:
  model_checkpoint:
    _target_: src.components.training_callbacks.ModelCheckpointToGCS
    dirpath: ${paths.output_dir}/checkpoints # directory to save the model file
    filename: "discrete-diffusion-{step:06d}-{val/recall@5:.4f}" # checkpoint filename
    monitor: "val/recall@5" # name of the logged metric which determines when model is improving
    verbose: True # verbosity mode
    save_last: null # additionally always save an exact copy of the last checkpoint to a file last.ckpt
    save_top_k: 1 # save k best models (determined by above metric)
    mode: "max" # "max" means higher metric value is better, can be also "min"
    auto_insert_metric_name: True # when True, the checkpoints filenames will contain the metric name
    save_weights_only: False # if True, then only the model's weights will be saved
    every_n_train_steps: null # number of training steps between checkpoints
    train_time_interval: null # checkpoints are monitored at the specified time interval
    every_n_epochs: null # number of epochs between checkpoints
    save_on_train_epoch_end: null # whether to run checkpointing at the end of the training epoch or the end of validation
    upload_after_n_checkpoints: 3 # number of checkpoints between uploads to gcs
    gcs_path: ${paths.output_dir}/checkpoints # path to save the model to gcs

  early_stopping:
    monitor: ${callbacks.model_checkpoint.monitor}
    patience: 10
    mode: ${callbacks.model_checkpoint.mode}
    strict: true
    check_on_train_epoch_end: false
    verbose: true
